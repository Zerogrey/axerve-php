<?php
/**
 * Apiv1paymentcreateOrderDetailsShippingAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Axerve\Client
 * @author   Axerve Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Axerve-php
 *
 * Axerve API client made for PHP
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Axerve Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Axerve\Client\Model;

use \ArrayAccess;
use \Axerve\Client\ObjectSerializer;

/**
 * Apiv1paymentcreateOrderDetailsShippingAddress Class Doc Comment
 *
 * @category Class
 * @package  Axerve\Client
 * @author   Axerve Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderAddressModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'apiv1paymentcreate_orderDetails_shippingAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'house_extention' => 'string',
'zip_code' => 'string',
'city' => 'string',
'house_number' => 'string',
'lastname' => 'string',
'first_name' => 'string',
'primary_phone' => 'string',
'street_name' => 'string',
'streetname2' => 'string',
'country_code' => 'string',
'middle_name' => 'string',
'state_code' => 'string',
'state' => 'string',
'email' => 'string',
'secondary_phone' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'house_extention' => null,
'zip_code' => null,
'city' => null,
'house_number' => null,
'lastname' => null,
'first_name' => null,
'primary_phone' => null,
'street_name' => null,
'streetname2' => null,
'country_code' => null,
'middle_name' => null,
'state_code' => null,
'state' => null,
'email' => null,
'secondary_phone' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'house_extention' => 'houseExtention',
'zip_code' => 'zipCode',
'city' => 'city',
'house_number' => 'houseNumber',
'lastname' => 'lastname',
'first_name' => 'firstName',
'primary_phone' => 'primaryPhone',
'street_name' => 'streetName',
'streetname2' => 'streetname2',
'country_code' => 'countryCode',
'middle_name' => 'middleName',
'state_code' => 'stateCode',
'state' => 'state',
'email' => 'email',
'secondary_phone' => 'secondaryPhone'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'house_extention' => 'setHouseExtention',
'zip_code' => 'setZipCode',
'city' => 'setCity',
'house_number' => 'setHouseNumber',
'lastname' => 'setLastname',
'first_name' => 'setFirstName',
'primary_phone' => 'setPrimaryPhone',
'street_name' => 'setStreetName',
'streetname2' => 'setStreetname2',
'country_code' => 'setCountryCode',
'middle_name' => 'setMiddleName',
'state_code' => 'setStateCode',
'state' => 'setState',
'email' => 'setEmail',
'secondary_phone' => 'setSecondaryPhone'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'house_extention' => 'getHouseExtention',
'zip_code' => 'getZipCode',
'city' => 'getCity',
'house_number' => 'getHouseNumber',
'lastname' => 'getLastname',
'first_name' => 'getFirstName',
'primary_phone' => 'getPrimaryPhone',
'street_name' => 'getStreetName',
'streetname2' => 'getStreetname2',
'country_code' => 'getCountryCode',
'middle_name' => 'getMiddleName',
'state_code' => 'getStateCode',
'state' => 'getState',
'email' => 'getEmail',
'secondary_phone' => 'getSecondaryPhone'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['house_extention'] = isset($data['house_extention']) ? $data['house_extention'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['house_number'] = isset($data['house_number']) ? $data['house_number'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['primary_phone'] = isset($data['primary_phone']) ? $data['primary_phone'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['streetname2'] = isset($data['streetname2']) ? $data['streetname2'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['state_code'] = isset($data['state_code']) ? $data['state_code'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['secondary_phone'] = isset($data['secondary_phone']) ? $data['secondary_phone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets house_extention
     *
     * @return string
     */
    public function getHouseExtention()
    {
        return $this->container['house_extention'];
    }

    /**
     * Sets house_extention
     *
     * @param string $house_extention house_extention
     *
     * @return $this
     */
    public function setHouseExtention($house_extention)
    {
        $this->container['house_extention'] = $house_extention;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code zip_code
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string $house_number house_number
     *
     * @return $this
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets primary_phone
     *
     * @return string
     */
    public function getPrimaryPhone()
    {
        return $this->container['primary_phone'];
    }

    /**
     * Sets primary_phone
     *
     * @param string $primary_phone primary_phone
     *
     * @return $this
     */
    public function setPrimaryPhone($primary_phone)
    {
        $this->container['primary_phone'] = $primary_phone;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name street_name
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets streetname2
     *
     * @return string
     */
    public function getStreetname2()
    {
        return $this->container['streetname2'];
    }

    /**
     * Sets streetname2
     *
     * @param string $streetname2 streetname2
     *
     * @return $this
     */
    public function setStreetname2($streetname2)
    {
        $this->container['streetname2'] = $streetname2;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name middle_name
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return string
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param string $state_code state_code
     *
     * @return $this
     */
    public function setStateCode($state_code)
    {
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets secondary_phone
     *
     * @return string
     */
    public function getSecondaryPhone()
    {
        return $this->container['secondary_phone'];
    }

    /**
     * Sets secondary_phone
     *
     * @param string $secondary_phone secondary_phone
     *
     * @return $this
     */
    public function setSecondaryPhone($secondary_phone)
    {
        $this->container['secondary_phone'] = $secondary_phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
