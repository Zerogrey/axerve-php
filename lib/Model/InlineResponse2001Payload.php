<?php
/**
 * InlineResponse2001Payload
 *
 * PHP version 5
 *
 * @category Class
 * @package  Axerve\Client
 * @author   Axerve Codegen team
 * @link     https://github.com/axerve-api/axerve-codegen
 */

/**
 * Axerve-php
 *
 * Axerve API client made for PHP
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/axerve-api/axerve-codegen.git
 * Axerve Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the axerve code generator program.
 * https://github.com/axerve-api/axerve-codegen
 * Do not edit the class manually.
 */

namespace Axerve\Client\Model;

use \ArrayAccess;
use \Axerve\Client\ObjectSerializer;

/**
 * InlineResponse2001Payload Class Doc Comment
 *
 * @category Class
 * @package  Axerve\Client
 * @author   Axerve Codegen team
 * @link     https://github.com/axerve-api/axerve-codegen
 */
class InlineResponse2001Payload implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $axerveModelName = 'inline_response_200_1_payload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $axerveTypes = [
        'transaction_type' => 'string',
'transaction_result' => 'string',
'authorization_result' => 'string',
'authorization_error_code' => 'string',
'authorization_code_description' => 'string',
'country' => 'string',
'country_code' => 'string',
'cvv' => 'string',
'cvv_description' => 'string',
'issuer_country' => 'string',
'issuer_country_code' => 'string',
'company' => 'string',
'company_code' => 'string',
'commercial' => 'string',
'product_description' => 'string',
'product_type' => 'string',
'check_digit' => 'string',
'check_digit_description' => 'string',
'expiry_date' => 'string',
'expiry_date_description' => 'string',
'_3_ds' => 'string',
'_3_ds_description' => 'string',
'prepaid' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $axerveFormats = [
        'transaction_type' => null,
'transaction_result' => null,
'authorization_result' => null,
'authorization_error_code' => null,
'authorization_code_description' => null,
'country' => null,
'country_code' => null,
'cvv' => null,
'cvv_description' => null,
'issuer_country' => null,
'issuer_country_code' => null,
'company' => null,
'company_code' => null,
'commercial' => null,
'product_description' => null,
'product_type' => null,
'check_digit' => null,
'check_digit_description' => null,
'expiry_date' => null,
'expiry_date_description' => null,
'_3_ds' => null,
'_3_ds_description' => null,
'prepaid' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function axerveTypes()
    {
        return self::$axerveTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function axerveFormats()
    {
        return self::$axerveFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_type' => 'transactionType',
'transaction_result' => 'transactionResult',
'authorization_result' => 'authorizationResult',
'authorization_error_code' => 'authorizationErrorCode',
'authorization_code_description' => 'authorizationCodeDescription',
'country' => 'country',
'country_code' => 'countryCode',
'cvv' => 'cvv&quot;',
'cvv_description' => 'cvvDescription',
'issuer_country' => 'issuerCountry',
'issuer_country_code' => 'issuerCountryCode',
'company' => 'company',
'company_code' => 'companyCode',
'commercial' => 'commercial',
'product_description' => 'productDescription',
'product_type' => 'productType',
'check_digit' => 'checkDigit',
'check_digit_description' => 'checkDigitDescription',
'expiry_date' => 'expiryDate&quot;',
'expiry_date_description' => 'expiryDateDescription',
'_3_ds' => '3DS&quot;',
'_3_ds_description' => '3DSDescription',
'prepaid' => 'prepaid'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_type' => 'setTransactionType',
'transaction_result' => 'setTransactionResult',
'authorization_result' => 'setAuthorizationResult',
'authorization_error_code' => 'setAuthorizationErrorCode',
'authorization_code_description' => 'setAuthorizationCodeDescription',
'country' => 'setCountry',
'country_code' => 'setCountryCode',
'cvv' => 'setCvv',
'cvv_description' => 'setCvvDescription',
'issuer_country' => 'setIssuerCountry',
'issuer_country_code' => 'setIssuerCountryCode',
'company' => 'setCompany',
'company_code' => 'setCompanyCode',
'commercial' => 'setCommercial',
'product_description' => 'setProductDescription',
'product_type' => 'setProductType',
'check_digit' => 'setCheckDigit',
'check_digit_description' => 'setCheckDigitDescription',
'expiry_date' => 'setExpiryDate',
'expiry_date_description' => 'setExpiryDateDescription',
'_3_ds' => 'set3Ds',
'_3_ds_description' => 'set3DsDescription',
'prepaid' => 'setPrepaid'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_type' => 'getTransactionType',
'transaction_result' => 'getTransactionResult',
'authorization_result' => 'getAuthorizationResult',
'authorization_error_code' => 'getAuthorizationErrorCode',
'authorization_code_description' => 'getAuthorizationCodeDescription',
'country' => 'getCountry',
'country_code' => 'getCountryCode',
'cvv' => 'getCvv',
'cvv_description' => 'getCvvDescription',
'issuer_country' => 'getIssuerCountry',
'issuer_country_code' => 'getIssuerCountryCode',
'company' => 'getCompany',
'company_code' => 'getCompanyCode',
'commercial' => 'getCommercial',
'product_description' => 'getProductDescription',
'product_type' => 'getProductType',
'check_digit' => 'getCheckDigit',
'check_digit_description' => 'getCheckDigitDescription',
'expiry_date' => 'getExpiryDate',
'expiry_date_description' => 'getExpiryDateDescription',
'_3_ds' => 'get3Ds',
'_3_ds_description' => 'get3DsDescription',
'prepaid' => 'getPrepaid'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$axerveModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['transaction_result'] = isset($data['transaction_result']) ? $data['transaction_result'] : null;
        $this->container['authorization_result'] = isset($data['authorization_result']) ? $data['authorization_result'] : null;
        $this->container['authorization_error_code'] = isset($data['authorization_error_code']) ? $data['authorization_error_code'] : null;
        $this->container['authorization_code_description'] = isset($data['authorization_code_description']) ? $data['authorization_code_description'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['cvv'] = isset($data['cvv']) ? $data['cvv'] : null;
        $this->container['cvv_description'] = isset($data['cvv_description']) ? $data['cvv_description'] : null;
        $this->container['issuer_country'] = isset($data['issuer_country']) ? $data['issuer_country'] : null;
        $this->container['issuer_country_code'] = isset($data['issuer_country_code']) ? $data['issuer_country_code'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['company_code'] = isset($data['company_code']) ? $data['company_code'] : null;
        $this->container['commercial'] = isset($data['commercial']) ? $data['commercial'] : null;
        $this->container['product_description'] = isset($data['product_description']) ? $data['product_description'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['check_digit'] = isset($data['check_digit']) ? $data['check_digit'] : null;
        $this->container['check_digit_description'] = isset($data['check_digit_description']) ? $data['check_digit_description'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['expiry_date_description'] = isset($data['expiry_date_description']) ? $data['expiry_date_description'] : null;
        $this->container['_3_ds'] = isset($data['_3_ds']) ? $data['_3_ds'] : null;
        $this->container['_3_ds_description'] = isset($data['_3_ds_description']) ? $data['_3_ds_description'] : null;
        $this->container['prepaid'] = isset($data['prepaid']) ? $data['prepaid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type transaction_type
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets transaction_result
     *
     * @return string
     */
    public function getTransactionResult()
    {
        return $this->container['transaction_result'];
    }

    /**
     * Sets transaction_result
     *
     * @param string $transaction_result transaction_result
     *
     * @return $this
     */
    public function setTransactionResult($transaction_result)
    {
        $this->container['transaction_result'] = $transaction_result;

        return $this;
    }

    /**
     * Gets authorization_result
     *
     * @return string
     */
    public function getAuthorizationResult()
    {
        return $this->container['authorization_result'];
    }

    /**
     * Sets authorization_result
     *
     * @param string $authorization_result authorization_result
     *
     * @return $this
     */
    public function setAuthorizationResult($authorization_result)
    {
        $this->container['authorization_result'] = $authorization_result;

        return $this;
    }

    /**
     * Gets authorization_error_code
     *
     * @return string
     */
    public function getAuthorizationErrorCode()
    {
        return $this->container['authorization_error_code'];
    }

    /**
     * Sets authorization_error_code
     *
     * @param string $authorization_error_code authorization_error_code
     *
     * @return $this
     */
    public function setAuthorizationErrorCode($authorization_error_code)
    {
        $this->container['authorization_error_code'] = $authorization_error_code;

        return $this;
    }

    /**
     * Gets authorization_code_description
     *
     * @return string
     */
    public function getAuthorizationCodeDescription()
    {
        return $this->container['authorization_code_description'];
    }

    /**
     * Sets authorization_code_description
     *
     * @param string $authorization_code_description authorization_code_description
     *
     * @return $this
     */
    public function setAuthorizationCodeDescription($authorization_code_description)
    {
        $this->container['authorization_code_description'] = $authorization_code_description;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets cvv
     *
     * @return string
     */
    public function getCvv()
    {
        return $this->container['cvv'];
    }

    /**
     * Sets cvv
     *
     * @param string $cvv cvv
     *
     * @return $this
     */
    public function setCvv($cvv)
    {
        $this->container['cvv'] = $cvv;

        return $this;
    }

    /**
     * Gets cvv_description
     *
     * @return string
     */
    public function getCvvDescription()
    {
        return $this->container['cvv_description'];
    }

    /**
     * Sets cvv_description
     *
     * @param string $cvv_description cvv_description
     *
     * @return $this
     */
    public function setCvvDescription($cvv_description)
    {
        $this->container['cvv_description'] = $cvv_description;

        return $this;
    }

    /**
     * Gets issuer_country
     *
     * @return string
     */
    public function getIssuerCountry()
    {
        return $this->container['issuer_country'];
    }

    /**
     * Sets issuer_country
     *
     * @param string $issuer_country issuer_country
     *
     * @return $this
     */
    public function setIssuerCountry($issuer_country)
    {
        $this->container['issuer_country'] = $issuer_country;

        return $this;
    }

    /**
     * Gets issuer_country_code
     *
     * @return string
     */
    public function getIssuerCountryCode()
    {
        return $this->container['issuer_country_code'];
    }

    /**
     * Sets issuer_country_code
     *
     * @param string $issuer_country_code issuer_country_code
     *
     * @return $this
     */
    public function setIssuerCountryCode($issuer_country_code)
    {
        $this->container['issuer_country_code'] = $issuer_country_code;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return string
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param string $company_code company_code
     *
     * @return $this
     */
    public function setCompanyCode($company_code)
    {
        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets commercial
     *
     * @return string
     */
    public function getCommercial()
    {
        return $this->container['commercial'];
    }

    /**
     * Sets commercial
     *
     * @param string $commercial commercial
     *
     * @return $this
     */
    public function setCommercial($commercial)
    {
        $this->container['commercial'] = $commercial;

        return $this;
    }

    /**
     * Gets product_description
     *
     * @return string
     */
    public function getProductDescription()
    {
        return $this->container['product_description'];
    }

    /**
     * Sets product_description
     *
     * @param string $product_description product_description
     *
     * @return $this
     */
    public function setProductDescription($product_description)
    {
        $this->container['product_description'] = $product_description;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string $product_type product_type
     *
     * @return $this
     */
    public function setProductType($product_type)
    {
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets check_digit
     *
     * @return string
     */
    public function getCheckDigit()
    {
        return $this->container['check_digit'];
    }

    /**
     * Sets check_digit
     *
     * @param string $check_digit check_digit
     *
     * @return $this
     */
    public function setCheckDigit($check_digit)
    {
        $this->container['check_digit'] = $check_digit;

        return $this;
    }

    /**
     * Gets check_digit_description
     *
     * @return string
     */
    public function getCheckDigitDescription()
    {
        return $this->container['check_digit_description'];
    }

    /**
     * Sets check_digit_description
     *
     * @param string $check_digit_description check_digit_description
     *
     * @return $this
     */
    public function setCheckDigitDescription($check_digit_description)
    {
        $this->container['check_digit_description'] = $check_digit_description;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return string
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param string $expiry_date expiry_date
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets expiry_date_description
     *
     * @return string
     */
    public function getExpiryDateDescription()
    {
        return $this->container['expiry_date_description'];
    }

    /**
     * Sets expiry_date_description
     *
     * @param string $expiry_date_description expiry_date_description
     *
     * @return $this
     */
    public function setExpiryDateDescription($expiry_date_description)
    {
        $this->container['expiry_date_description'] = $expiry_date_description;

        return $this;
    }

    /**
     * Gets _3_ds
     *
     * @return string
     */
    public function get3Ds()
    {
        return $this->container['_3_ds'];
    }

    /**
     * Sets _3_ds
     *
     * @param string $_3_ds _3_ds
     *
     * @return $this
     */
    public function set3Ds($_3_ds)
    {
        $this->container['_3_ds'] = $_3_ds;

        return $this;
    }

    /**
     * Gets _3_ds_description
     *
     * @return string
     */
    public function get3DsDescription()
    {
        return $this->container['_3_ds_description'];
    }

    /**
     * Sets _3_ds_description
     *
     * @param string $_3_ds_description _3_ds_description
     *
     * @return $this
     */
    public function set3DsDescription($_3_ds_description)
    {
        $this->container['_3_ds_description'] = $_3_ds_description;

        return $this;
    }

    /**
     * Gets prepaid
     *
     * @return string
     */
    public function getPrepaid()
    {
        return $this->container['prepaid'];
    }

    /**
     * Sets prepaid
     *
     * @param string $prepaid prepaid
     *
     * @return $this
     */
    public function setPrepaid($prepaid)
    {
        $this->container['prepaid'] = $prepaid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            $jsonString = json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
return "$jsonString";
        }

        $jsonString =  json_encode(ObjectSerializer::sanitizeForSerialization($this));
return "$jsonString";
    }
}
